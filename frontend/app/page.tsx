'use client'

import { useState } from 'react'
import { URLInputForm, ProgressDisplay, TranscriptViewer } from '@/components'
import { 
  startTranscriptionJob, 
  generateClientId,
  ApiValidationError,
  ApiNetworkError,
  ApiHttpError
} from '@/services/api'

export default function HomePage() {
  // State management
  const [url, setUrl] = useState<string>('')
  const [jobId, setJobId] = useState<string | null>(null)
  const [isProcessing, setIsProcessing] = useState<boolean>(false)
  const [progress, setProgress] = useState<{
    stage: string
    progress: number
    message: string
  }>({
    stage: 'waiting',
    progress: 0,
    message: 'Ready to start transcription'
  })
  const [finalTranscript, setFinalTranscript] = useState<string>('')
  const [transcriptFormat, setTranscriptFormat] = useState<'txt' | 'srt' | 'vtt' | 'json'>('txt')
  const [error, setError] = useState<string | null>(null)

  // Handle form submission
  const handleSubmit = async (submittedUrl: string, selectedFormat: 'txt' | 'srt' | 'vtt' | 'json') => {
    try {
      setError(null)
      setUrl(submittedUrl)
      setTranscriptFormat(selectedFormat)
      setIsProcessing(true)
      setProgress({
        stage: 'starting',
        progress: 10,
        message: 'Initializing transcription job...'
      })

      // Generate client ID and start transcription job
      const clientId = generateClientId()
      
      setProgress({
        stage: 'connecting',
        progress: 25,
        message: 'Connecting to transcription service...'
      })

      const response = await startTranscriptionJob(submittedUrl, clientId, {
        output_format: selectedFormat
      })

      setJobId(response.job_id)
      
      setProgress({
        stage: 'processing',
        progress: 50,
        message: 'Processing video and extracting audio...'
      })

      // For Phase 3, we'll simulate progress and show mock transcript
      // In Phase 4, this will be replaced with WebSocket connection
      setTimeout(() => {
        setProgress({
          stage: 'transcribing',
          progress: 75,
          message: 'Transcribing audio with Groq AI...'
        })
      }, 2000)

      setTimeout(() => {
        setProgress({
          stage: 'complete',
          progress: 100,
          message: 'Transcription completed successfully!'
        })
        
        // Mock transcript data for Phase 3
        const mockTranscript = `Welcome to this demonstration video. This is a sample transcription that would normally be generated by Groq's lightning-fast AI models.

In a real scenario, this text would contain the actual spoken content from your YouTube video, accurately transcribed and formatted according to your selected output format.

Key features of ytFetch include:
- Fast transcription powered by Groq
- Multiple output formats (TXT, SRT, VTT, JSON)
- Real-time progress tracking
- Professional-grade accuracy

This mock transcript demonstrates how your final results will appear in the interface.`

        setFinalTranscript(mockTranscript)
        setIsProcessing(false)
      }, 4000)

    } catch (err) {
      setIsProcessing(false)
      
      if (err instanceof ApiValidationError) {
        setError(`Validation Error: ${err.message}`)
      } else if (err instanceof ApiNetworkError) {
        setError(`Network Error: ${err.message}. Please check your connection and try again.`)
      } else if (err instanceof ApiHttpError) {
        setError(`Server Error: ${err.message} (Status: ${err.status})`)
      } else {
        setError(`Unexpected Error: ${err instanceof Error ? err.message : 'Something went wrong'}`)
      }
      
      setProgress({
        stage: 'error',
        progress: 0,
        message: 'Transcription failed'
      })
    }
  }

  // Handle format change
  const handleFormatChange = (newFormat: 'txt' | 'srt' | 'vtt' | 'json') => {
    setTranscriptFormat(newFormat)
  }

  // Reset function for starting over
  const handleReset = () => {
    setUrl('')
    setJobId(null)
    setIsProcessing(false)
    setProgress({
      stage: 'waiting',
      progress: 0,
      message: 'Ready to start transcription'
    })
    setFinalTranscript('')
    setTranscriptFormat('txt')
    setError(null)
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Hero Section */}
      <div className="container mx-auto px-4 pt-12 pb-8">
        <div className="text-center max-w-4xl mx-auto">
          <h1 className="text-6xl font-bold tracking-tight mb-6">
            <span className="text-foreground">yt</span>
            <span className="text-primary">Fetch</span>
          </h1>
          <p className="text-xl text-muted-foreground mb-8 leading-relaxed">
            Lightning-fast YouTube video transcription powered by{' '}
            <span className="text-primary font-semibold">Groq's AI models</span>.
            Convert any YouTube video to text, SRT, VTT, or JSON format in seconds.
          </p>
          <div className="flex items-center justify-center gap-6 text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-primary rounded-full"></div>
              <span>Powered by Groq</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <span>Multiple Formats</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
              <span>Real-time Progress</span>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="container mx-auto px-4 pb-12">
        <div className="max-w-4xl mx-auto space-y-8">
          
          {/* URL Input Form */}
          <div className="bg-card rounded-lg border p-6 shadow-sm">
            <URLInputForm 
              onSubmit={handleSubmit}
              disabled={isProcessing}
              onReset={handleReset}
              showReset={jobId !== null || finalTranscript !== ''}
            />
          </div>

          {/* Error Display */}
          {error && (
            <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <div className="w-5 h-5 rounded-full bg-destructive flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-destructive-foreground text-xs font-bold">!</span>
                </div>
                <div>
                  <h3 className="font-semibold text-destructive mb-1">Transcription Failed</h3>
                  <p className="text-sm text-destructive/90">{error}</p>
                </div>
              </div>
            </div>
          )}

          {/* Progress Display */}
          {isProcessing && (
            <div className="bg-card rounded-lg border p-6 shadow-sm">
              <ProgressDisplay
                currentStage={progress.stage}
                progress={progress.progress}
                message={progress.message}
                jobId={jobId}
                showDetails={true}
              />
            </div>
          )}

          {/* Transcript Viewer */}
          {finalTranscript && !isProcessing && (
            <div className="bg-card rounded-lg border p-6 shadow-sm">
              <TranscriptViewer
                transcript={finalTranscript}
                format={transcriptFormat}
                onFormatChange={handleFormatChange}
                videoTitle="Sample Video Title"
                isLoading={false}
                downloadEnabled={true}
              />
            </div>
          )}

          {/* Getting Started Section (shown when no activity) */}
          {!isProcessing && !finalTranscript && !error && (
            <div className="bg-card/50 rounded-lg border border-dashed border-border/60 p-8 text-center">
              <div className="max-w-md mx-auto">
                <h3 className="text-lg font-semibold mb-3 text-foreground">
                  Ready to get started?
                </h3>
                <p className="text-muted-foreground mb-6">
                  Paste any YouTube URL above and select your preferred output format. 
                  Our AI will transcribe your video in seconds.
                </p>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="bg-muted/50 rounded-lg p-3">
                    <div className="font-medium text-foreground mb-1">Supported Formats</div>
                    <div className="text-muted-foreground">TXT, SRT, VTT, JSON</div>
                  </div>
                  <div className="bg-muted/50 rounded-lg p-3">
                    <div className="font-medium text-foreground mb-1">Processing Time</div>
                    <div className="text-muted-foreground">Usually under 30 seconds</div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Footer */}
      <div className="border-t border-border bg-card/30">
        <div className="container mx-auto px-4 py-6">
          <div className="text-center text-sm text-muted-foreground">
            <p>
              Powered by{' '}
              <span className="text-primary font-semibold">Groq's lightning-fast AI models</span>
              {' '}â€¢ Built for developers and content creators
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}